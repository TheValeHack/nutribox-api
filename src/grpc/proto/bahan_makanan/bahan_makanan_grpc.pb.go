// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: src/grpc/proto/bahan_makanan/bahan_makanan.proto

package bahan_makanan

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BahanMakananService_GetAllBahanMakanan_FullMethodName            = "/bahan_makanan.BahanMakananService/GetAllBahanMakanan"
	BahanMakananService_GetBahanMakananByKode_FullMethodName         = "/bahan_makanan.BahanMakananService/GetBahanMakananByKode"
	BahanMakananService_GetBahanMakananById_FullMethodName           = "/bahan_makanan.BahanMakananService/GetBahanMakananById"
	BahanMakananService_GetBahanMakananByMentahOlahan_FullMethodName = "/bahan_makanan.BahanMakananService/GetBahanMakananByMentahOlahan"
	BahanMakananService_GetBahanMakananByKelompok_FullMethodName     = "/bahan_makanan.BahanMakananService/GetBahanMakananByKelompok"
	BahanMakananService_UpdateBahanMakanan_FullMethodName            = "/bahan_makanan.BahanMakananService/UpdateBahanMakanan"
)

// BahanMakananServiceClient is the client API for BahanMakananService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BahanMakananServiceClient interface {
	GetAllBahanMakanan(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListBahanMakananResponse, error)
	GetBahanMakananByKode(ctx context.Context, in *GetBahanMakananRequest, opts ...grpc.CallOption) (*BahanMakananResponse, error)
	GetBahanMakananById(ctx context.Context, in *GetBahanMakananByIdRequest, opts ...grpc.CallOption) (*BahanMakananResponse, error)
	GetBahanMakananByMentahOlahan(ctx context.Context, in *GetBahanMakananByMentahOlahanRequest, opts ...grpc.CallOption) (*ListBahanMakananResponse, error)
	GetBahanMakananByKelompok(ctx context.Context, in *GetBahanMakananByKelompokRequest, opts ...grpc.CallOption) (*ListBahanMakananResponse, error)
	UpdateBahanMakanan(ctx context.Context, in *UpdateBahanMakananRequest, opts ...grpc.CallOption) (*BahanMakananResponse, error)
}

type bahanMakananServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBahanMakananServiceClient(cc grpc.ClientConnInterface) BahanMakananServiceClient {
	return &bahanMakananServiceClient{cc}
}

func (c *bahanMakananServiceClient) GetAllBahanMakanan(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListBahanMakananResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBahanMakananResponse)
	err := c.cc.Invoke(ctx, BahanMakananService_GetAllBahanMakanan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bahanMakananServiceClient) GetBahanMakananByKode(ctx context.Context, in *GetBahanMakananRequest, opts ...grpc.CallOption) (*BahanMakananResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BahanMakananResponse)
	err := c.cc.Invoke(ctx, BahanMakananService_GetBahanMakananByKode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bahanMakananServiceClient) GetBahanMakananById(ctx context.Context, in *GetBahanMakananByIdRequest, opts ...grpc.CallOption) (*BahanMakananResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BahanMakananResponse)
	err := c.cc.Invoke(ctx, BahanMakananService_GetBahanMakananById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bahanMakananServiceClient) GetBahanMakananByMentahOlahan(ctx context.Context, in *GetBahanMakananByMentahOlahanRequest, opts ...grpc.CallOption) (*ListBahanMakananResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBahanMakananResponse)
	err := c.cc.Invoke(ctx, BahanMakananService_GetBahanMakananByMentahOlahan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bahanMakananServiceClient) GetBahanMakananByKelompok(ctx context.Context, in *GetBahanMakananByKelompokRequest, opts ...grpc.CallOption) (*ListBahanMakananResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBahanMakananResponse)
	err := c.cc.Invoke(ctx, BahanMakananService_GetBahanMakananByKelompok_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bahanMakananServiceClient) UpdateBahanMakanan(ctx context.Context, in *UpdateBahanMakananRequest, opts ...grpc.CallOption) (*BahanMakananResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BahanMakananResponse)
	err := c.cc.Invoke(ctx, BahanMakananService_UpdateBahanMakanan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BahanMakananServiceServer is the server API for BahanMakananService service.
// All implementations must embed UnimplementedBahanMakananServiceServer
// for forward compatibility.
type BahanMakananServiceServer interface {
	GetAllBahanMakanan(context.Context, *Empty) (*ListBahanMakananResponse, error)
	GetBahanMakananByKode(context.Context, *GetBahanMakananRequest) (*BahanMakananResponse, error)
	GetBahanMakananById(context.Context, *GetBahanMakananByIdRequest) (*BahanMakananResponse, error)
	GetBahanMakananByMentahOlahan(context.Context, *GetBahanMakananByMentahOlahanRequest) (*ListBahanMakananResponse, error)
	GetBahanMakananByKelompok(context.Context, *GetBahanMakananByKelompokRequest) (*ListBahanMakananResponse, error)
	UpdateBahanMakanan(context.Context, *UpdateBahanMakananRequest) (*BahanMakananResponse, error)
	mustEmbedUnimplementedBahanMakananServiceServer()
}

// UnimplementedBahanMakananServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBahanMakananServiceServer struct{}

func (UnimplementedBahanMakananServiceServer) GetAllBahanMakanan(context.Context, *Empty) (*ListBahanMakananResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBahanMakanan not implemented")
}
func (UnimplementedBahanMakananServiceServer) GetBahanMakananByKode(context.Context, *GetBahanMakananRequest) (*BahanMakananResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBahanMakananByKode not implemented")
}
func (UnimplementedBahanMakananServiceServer) GetBahanMakananById(context.Context, *GetBahanMakananByIdRequest) (*BahanMakananResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBahanMakananById not implemented")
}
func (UnimplementedBahanMakananServiceServer) GetBahanMakananByMentahOlahan(context.Context, *GetBahanMakananByMentahOlahanRequest) (*ListBahanMakananResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBahanMakananByMentahOlahan not implemented")
}
func (UnimplementedBahanMakananServiceServer) GetBahanMakananByKelompok(context.Context, *GetBahanMakananByKelompokRequest) (*ListBahanMakananResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBahanMakananByKelompok not implemented")
}
func (UnimplementedBahanMakananServiceServer) UpdateBahanMakanan(context.Context, *UpdateBahanMakananRequest) (*BahanMakananResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBahanMakanan not implemented")
}
func (UnimplementedBahanMakananServiceServer) mustEmbedUnimplementedBahanMakananServiceServer() {}
func (UnimplementedBahanMakananServiceServer) testEmbeddedByValue()                             {}

// UnsafeBahanMakananServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BahanMakananServiceServer will
// result in compilation errors.
type UnsafeBahanMakananServiceServer interface {
	mustEmbedUnimplementedBahanMakananServiceServer()
}

func RegisterBahanMakananServiceServer(s grpc.ServiceRegistrar, srv BahanMakananServiceServer) {
	// If the following call pancis, it indicates UnimplementedBahanMakananServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BahanMakananService_ServiceDesc, srv)
}

func _BahanMakananService_GetAllBahanMakanan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BahanMakananServiceServer).GetAllBahanMakanan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BahanMakananService_GetAllBahanMakanan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BahanMakananServiceServer).GetAllBahanMakanan(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BahanMakananService_GetBahanMakananByKode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBahanMakananRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BahanMakananServiceServer).GetBahanMakananByKode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BahanMakananService_GetBahanMakananByKode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BahanMakananServiceServer).GetBahanMakananByKode(ctx, req.(*GetBahanMakananRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BahanMakananService_GetBahanMakananById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBahanMakananByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BahanMakananServiceServer).GetBahanMakananById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BahanMakananService_GetBahanMakananById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BahanMakananServiceServer).GetBahanMakananById(ctx, req.(*GetBahanMakananByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BahanMakananService_GetBahanMakananByMentahOlahan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBahanMakananByMentahOlahanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BahanMakananServiceServer).GetBahanMakananByMentahOlahan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BahanMakananService_GetBahanMakananByMentahOlahan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BahanMakananServiceServer).GetBahanMakananByMentahOlahan(ctx, req.(*GetBahanMakananByMentahOlahanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BahanMakananService_GetBahanMakananByKelompok_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBahanMakananByKelompokRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BahanMakananServiceServer).GetBahanMakananByKelompok(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BahanMakananService_GetBahanMakananByKelompok_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BahanMakananServiceServer).GetBahanMakananByKelompok(ctx, req.(*GetBahanMakananByKelompokRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BahanMakananService_UpdateBahanMakanan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBahanMakananRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BahanMakananServiceServer).UpdateBahanMakanan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BahanMakananService_UpdateBahanMakanan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BahanMakananServiceServer).UpdateBahanMakanan(ctx, req.(*UpdateBahanMakananRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BahanMakananService_ServiceDesc is the grpc.ServiceDesc for BahanMakananService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BahanMakananService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bahan_makanan.BahanMakananService",
	HandlerType: (*BahanMakananServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllBahanMakanan",
			Handler:    _BahanMakananService_GetAllBahanMakanan_Handler,
		},
		{
			MethodName: "GetBahanMakananByKode",
			Handler:    _BahanMakananService_GetBahanMakananByKode_Handler,
		},
		{
			MethodName: "GetBahanMakananById",
			Handler:    _BahanMakananService_GetBahanMakananById_Handler,
		},
		{
			MethodName: "GetBahanMakananByMentahOlahan",
			Handler:    _BahanMakananService_GetBahanMakananByMentahOlahan_Handler,
		},
		{
			MethodName: "GetBahanMakananByKelompok",
			Handler:    _BahanMakananService_GetBahanMakananByKelompok_Handler,
		},
		{
			MethodName: "UpdateBahanMakanan",
			Handler:    _BahanMakananService_UpdateBahanMakanan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/proto/bahan_makanan/bahan_makanan.proto",
}
